generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider                         = "zod-prisma-types"
    output                           = "../src/types/zod"
    useMultipleFiles                 = false
    writeBarrelFiles                 = true
    createInputTypes                 = true
    createModelTypes                 = false
    addInputTypeValidation           = true
    addIncludeType                   = true
    addSelectType                    = true
    validateWhereUniqueInput         = false
    createOptionalDefaultValuesTypes = true
    createRelationValuesTypes        = false
    createPartialTypes               = false
    useDefaultValidators             = true
    coerceDate                       = true
    writeNullishInModelTypes         = false
    useTypeAssertions                = true
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserRoles {
    student
    teacher
    parent
    admin
}

model User {
    id       String    @id @default(cuid())
    role     UserRoles
    username String    @unique /// @zod.string.min(6, { message: "short-input" }).max(16, { message: "long-input" })
    password String /// @zod.string.min(6, { message: "short-input" }).max(16, { message: "long-input" })
}

// schema.prisma

model GalleryFolder {
    id   String @id @default(cuid())
    name String @unique

    // Define the one-to-many relationship with GalleryImage
    images GalleryImage[] @relation("GalleryImages")

    // Define the one-to-one relationship with GalleryImage for the thumbnail
    thumbnail   GalleryImage? @relation("Thumbnail", fields: [thumbnailId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    thumbnailId String?       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model GalleryImage {
    id       String @id @default(cuid())
    filename String

    // Define the many-to-one relationship with GalleryFolder
    folder   GalleryFolder @relation("GalleryImages", fields: [folderId], references: [id])
    folderId String

    // Define the one-to-one relationship with GalleryFolder for serving as a thumbnail
    thumbnailFor GalleryFolder? @relation("Thumbnail")

    @@index([folderId])
}

model S3UploadTransaction {
    id           String   @id @default(cuid())
    s3Path       String   @unique
    errorMessage String?
    errorCode    String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([s3Path])
}
